var documenterSearchIndex = {"docs":
[{"location":"func_list/","page":"Index","title":"Index","text":"","category":"page"},{"location":"psth/#Raster-and-PSTH","page":"Raster and PSTH","title":"Raster and PSTH","text":"","category":"section"},{"location":"psth/","page":"Raster and PSTH","title":"Raster and PSTH","text":"Raster plot and PSTH are very useful for neural activities to periodic stimuli. Patterns of firing can be easily seen and further analyized when spikes are aligned with the onset of the stimuli.","category":"page"},{"location":"psth/#Getting-Rasters","page":"Raster and PSTH","title":"Getting Rasters","text":"","category":"section"},{"location":"psth/","page":"Raster and PSTH","title":"Raster and PSTH","text":"Rasters will be created as Vector{Vector{T}}, where each subvector will be spike times relative to the stimulus onset. Besides the spike train, you should at least have the onset time of the stimulus (marker::AbstractVector), and specify the length of time before the onset and duration of the stimulus and time after the stimulus.","category":"page"},{"location":"psth/","page":"Raster and PSTH","title":"Raster and PSTH","text":"julia> spike_train = rand(1000) * 50\njulia> marker = 0:10:40\njulia> raster = SpikeTriggered.Stats.spike_raster(spike_train, marker;\n                                           head=0.5, duration=1.0, tail=0.5)\n...","category":"page"},{"location":"psth/#Getting-PSTH","page":"Raster and PSTH","title":"Getting PSTH","text":"","category":"section"},{"location":"psth/#Using-Histogram","page":"Raster and PSTH","title":"Using Histogram","text":"","category":"section"},{"location":"psth/","page":"Raster and PSTH","title":"Raster and PSTH","text":"Just like get a histogram from any other data. You could either define the bin size of your histogram:","category":"page"},{"location":"psth/","page":"Raster and PSTH","title":"Raster and PSTH","text":"julia> bin_size = 0.5\njulia> psth = SpikeTriggered.Stats.spike_histogram(spike_train/raster, bin_size)","category":"page"},{"location":"psth/","page":"Raster and PSTH","title":"Raster and PSTH","text":"Or providing the edges of your bins:","category":"page"},{"location":"psth/","page":"Raster and PSTH","title":"Raster and PSTH","text":"julia> edges = 0:0.01:50.0\njulia> psth = SpikeTriggered.Stats.spike_histogram(spike_train/raster, edges)","category":"page"},{"location":"psth/","page":"Raster and PSTH","title":"Raster and PSTH","text":"The latter is preferred, as you could have finer control and you could have a nonlinear timescale. Just don't forget to append the last right edge.","category":"page"},{"location":"psth/#Using-Filter","page":"Raster and PSTH","title":"Using Filter","text":"","category":"section"},{"location":"psth/","page":"Raster and PSTH","title":"Raster and PSTH","text":"Sometimes, it's arbitary to find a good bin size, or you want to smooth the histogram, you can use a filter to generate a smooth PSTH. Essentially, it is a convolution over time steps provided by projection::AbstractVector.","category":"page"},{"location":"psth/","page":"Raster and PSTH","title":"Raster and PSTH","text":"textPSTH(t) = (h * s)(t) = sum_i delta(t - t_i) h (t - t_i) t in textprojection","category":"page"},{"location":"psth/","page":"Raster and PSTH","title":"Raster and PSTH","text":"where h is the kernel function, t'_i is the spike time.","category":"page"},{"location":"psth/","page":"Raster and PSTH","title":"Raster and PSTH","text":"Gaussian kernel is mostly common one, so you can generate it by:","category":"page"},{"location":"psth/","page":"Raster and PSTH","title":"Raster and PSTH","text":"julia> psth = SpikeTriggered.Stats.spike_filter_gaussian(spike_train/raster, projection; σ=0.010)","category":"page"},{"location":"psth/","page":"Raster and PSTH","title":"Raster and PSTH","text":"Or, if you want, you can also create your own kernel:","category":"page"},{"location":"psth/","page":"Raster and PSTH","title":"Raster and PSTH","text":"julia> my_kernel(dt; thresh) = dt < thresh ? 0 : 1\njulia> psth = SpikeTriggered.Stats.spike_filter(spike_train/raster, projection, my_kernel; thresh=0.5)","category":"page"},{"location":"psth/#Functions","page":"Raster and PSTH","title":"Functions","text":"","category":"section"},{"location":"psth/","page":"Raster and PSTH","title":"Raster and PSTH","text":"SpikeTriggered.Stats.spike_raster\nSpikeTriggered.Stats.spike_histogram\nSpikeTriggered.Stats.spike_filter\nSpikeTriggered.Stats.spike_filter_gaussian\nSpikeTriggered.PSTH.psth2timestamps\nSpikeTriggered.PSTH.psth2trace","category":"page"},{"location":"psth/#SpikeTriggered.Stats.spike_raster","page":"Raster and PSTH","title":"SpikeTriggered.Stats.spike_raster","text":"spike_raster(spk, markers; head, duration, tail) -> Vector{Vector{T}}\n\nCreate rasters form spike train and onset time of stimulus.\n\nArguments:\n\nspk::AbstractVector{T}: spike train\nmarkers::AbstractVector: onset time of stimulus\n\nKeyword Arguments:\n\nhead: time included before the event markers\nduration: event length\ntail: time included after the event duration\noffset: flag to offset all the spike time to the onset time. [default: true`]\n\nReturn\n\nrasters as Vector{Vector{T}}\n\n\n\n\n\n","category":"function"},{"location":"psth/#SpikeTriggered.Stats.spike_histogram","page":"Raster and PSTH","title":"SpikeTriggered.Stats.spike_histogram","text":"spike_histogram(spk::AbstractVector, edges::AbstractVector)\n\nPSTH as histogram, where edges are defined by user.\n\nArguments:\n\nspk::AbstractVector{T}: spike train\nedges::AbstractVector: edges of histogram, noted that it should be length of n+1.\n\nReturns:\n\npsth as Vector{T} of length n.\n\n\n\n\n\nspike_histogram(spk::AbstractVector, binsize::Real)\n\nPSTH as histogram, where edges are created based on the provided binsize.\n\nArguments:\n\nspk::AbstractVector{T}: spike train\nbinsize::Real: binsize of histogram. edges will be created as: range(_min_time, step=binsize, length=_L+1)\n\n\n\n\n\nspike_histogram(raster::Vector{Vector{T}}, args...; norm=true)\n\nPSTH as histogram from averaging trials.\n\n\n\n\n\n","category":"function"},{"location":"psth/#SpikeTriggered.Stats.spike_filter","page":"Raster and PSTH","title":"SpikeTriggered.Stats.spike_filter","text":"spike_filter(spk, proj, kernel::Function; kwargs...) where {T <: Real} -> Vector{T}\n\ngenerating smoothed curve from spike trains. equivalent to convolution.\n\ntextPSTH(t) = (h * s)(t) = sum_i delta(t - t_i) h (t - t_i) t in textproj\n\nArguments:\n\nspk: spike train vector\nproj: range or vector of timestamps interested\nkernel: function of the smoothing kernel, should be (::T; kwargs...)::T\n\nReturns:\n\npsth as Vector{T}, same length as proj.\n\n\n\n\n\nspike_filter(raster, proj, kernel::Function; kwargs...) where {T <: Real} -> Vector{T}\n\ngenerating smoothed curve from rasters.\n\n\n\n\n\n","category":"function"},{"location":"psth/#SpikeTriggered.Stats.spike_filter_gaussian","page":"Raster and PSTH","title":"SpikeTriggered.Stats.spike_filter_gaussian","text":"spike_filter_gaussian(spk_or_raster, proj; σ=0.010)\n\nSpike filter using Gaussian function.\n\ng(x) = fracexp(-fracx^22 σ^2)sqrt2pi σ\n\n\n\n\n\n","category":"function"},{"location":"psth/#SpikeTriggered.PSTH.psth2timestamps","page":"Raster and PSTH","title":"SpikeTriggered.PSTH.psth2timestamps","text":"psth2timestamps(psth::Vector{T}; width=1, sporadic=false, upper=Inf) where {T <: Integer} -> Vector{Float64}\n\nconvert PSTH to timestamps.\n\nArguments\n\npsth::Vector{T <: Integer}\n\nKeyword Arguments\n\nwidth: define the bin width [default: 1]\nsporadic: if true, the generation would be random (using rand); otherwise, evenly divided [default: false]\nupper: cutoff of the PSTH bin value [default: Inf]\n\nReturn\n\nVector{Float64}\n\n\n\n\n\n","category":"function"},{"location":"psth/#SpikeTriggered.PSTH.psth2trace","page":"Raster and PSTH","title":"SpikeTriggered.PSTH.psth2trace","text":"psth2trace(hist::Vector{T}, roi; σ=0.03, freq=35) where {T} -> Vector{T}\n\nconvert histgram into trace-like data, with a Gaussian filter.\n\nArguments\n\nhist::Vector{T}: histogram vector\nroi: range or a vector of timepoints.\n\nKeyword Arguments:\n\nσ: sigma of the gaussian kernel (in seconds) [default: 0.03]\nfreq: equivalent sampling frequency (Hz) of the histogram. [default: 35]\n\nReturns:\n\nVector{T}: with the same length as the roi.\n\n\n\n\n\n","category":"function"},{"location":"reverse_correlation/#Reverse-Correlation","page":"Reverse Correlation","title":"Reverse Correlation","text":"","category":"section"},{"location":"reverse_correlation/#Spike-Triggered-Average","page":"Reverse Correlation","title":"Spike Triggered Average","text":"","category":"section"},{"location":"reverse_correlation/#Spike-Triggered-Covariance","page":"Reverse Correlation","title":"Spike Triggered Covariance","text":"","category":"section"},{"location":"reverse_correlation/#STA-Footprint","page":"Reverse Correlation","title":"STA Footprint","text":"","category":"section"},{"location":"reverse_correlation/#Functions","page":"Reverse Correlation","title":"Functions","text":"","category":"section"},{"location":"reverse_correlation/","page":"Reverse Correlation","title":"Reverse Correlation","text":"SpikeTriggered.Stats.spike_triggered_average\nSpikeTriggered.Stats.spike_triggered_covariance","category":"page"},{"location":"reverse_correlation/#SpikeTriggered.Stats.spike_triggered_average","page":"Reverse Correlation","title":"SpikeTriggered.Stats.spike_triggered_average","text":"spike_triggered_average(X::AbstractMatrix{T}, y::AbstractArray{T}; n=10, norm=true) where {T} -> Vector{T}\n\nget the spike triggered average from the stimulus matrix and the spike trains.\n\nArguments:\n\nX: stimulus matrix that supports :* and circshift functions, with general shape of [nTimePoints x nDimensions].\n\nIn most cases, try to use the built-in Array type.\n\ny::Array{T}: spike train as column vectors. STA will be calculated with the trial average.\n\nKeyword Arguments:\n\nn: how many timepoints to look back [default: 10].\n\nReturns:\n\nVector: Vector of the type of X; flattened version of the STA matrix [nDimensions x n]. (NOTE: t0 at index 1.)\n\n\n\n\n\n","category":"function"},{"location":"reverse_correlation/#SpikeTriggered.Stats.spike_triggered_covariance","page":"Reverse Correlation","title":"SpikeTriggered.Stats.spike_triggered_covariance","text":"spike_triggered_covariance(X::AbstractMatrix{T}, y::AbstractArray{T}; n::Integer=10, verbose=true) where {T, U} -> Matrix{T}\n\n\n\n\n\n","category":"function"},{"location":"reverse_correlation/#Readings","page":"Reverse Correlation","title":"Readings","text":"","category":"section"},{"location":"reverse_correlation/","page":"Reverse Correlation","title":"Reverse Correlation","text":"Schwartz, O., Pillow, J. W., Rust, N. C. & Simoncelli, E. P. Spike-triggered neural characterization. Journal of Vision 6, 484–507 (2006). DOI: 10.1167/6.4.13","category":"page"},{"location":"forward_correlation/#Forward-Correlation","page":"Forward Correlation","title":"Forward Correlation","text":"","category":"section"},{"location":"#SpikeTriggered.jl-Documentation","page":"Home","title":"SpikeTriggered.jl Documentation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The SpikeTriggered package provides a collection of functions for analysis related to spike trains. Including:","category":"page"},{"location":"","page":"Home","title":"Home","text":"converting spike train into rasters.\ngetting PSTH from spike train, by using histogram or Gaussian filter.\nestimating RFs using forward correlation and reserve correlation.\nthresholding waveforms to extract spike events.\netc.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Functions for spike train statistics are in the Stats submodule and functions for waveform processing are in the Waveforms submodule. Functions in the Stimulus submodule are for internal uses of HirschLab.","category":"page"},{"location":"","page":"Home","title":"Home","text":"For visualization, checkout the NeuroMakie.jl package.","category":"page"}]
}
